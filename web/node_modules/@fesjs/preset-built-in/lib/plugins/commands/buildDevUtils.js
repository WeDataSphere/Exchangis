"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanTmpPathExceptCache = cleanTmpPathExceptCache;
exports.getBundleAndConfigs = getBundleAndConfigs;
exports.printFileSizes = printFileSizes;

var _path = require("path");

var _fs = require("fs");

var _utils = require("@fesjs/utils");

var _zlib = _interopRequireDefault(require("zlib"));

var _webpackConfig = _interopRequireDefault(require("./webpackConfig"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @copy 该文件代码大部分出自 umi，有需要请参考：
 * https://github.com/umijs/umi/blob/master/packages/preset-built-in/src/plugins/commands/buildDevUtils.ts
 */
async function getBundleAndConfigs({
  api
}) {
  // get config
  const env = api.env === 'production' ? 'production' : 'development';
  const getConfigOpts = await api.applyPlugins({
    type: api.ApplyPluginsType.modify,
    key: 'modifyBundleConfigOpts',
    initialValue: {
      cwd: api.paths.cwd,
      config: api.config,
      env,
      entry: {
        index: (0, _path.join)(api.paths.absTmpPath, 'fes.js')
      },

      // @ts-ignore
      async modifyBabelOpts(opts) {
        return api.applyPlugins({
          type: api.ApplyPluginsType.modify,
          key: 'modifyBabelOpts',
          initialValue: opts
        });
      },

      async modifyBabelPresetOpts(opts) {
        return api.applyPlugins({
          type: api.ApplyPluginsType.modify,
          key: 'modifyBabelPresetOpts',
          initialValue: opts
        });
      },

      async chainWebpack(webpackConfig, opts) {
        return api.applyPlugins({
          type: api.ApplyPluginsType.modify,
          key: 'chainWebpack',
          initialValue: webpackConfig,
          args: { ...opts
          }
        });
      },

      async headScripts() {
        return api.applyPlugins({
          key: 'addHTMLHeadScripts',
          type: api.ApplyPluginsType.add,
          initialState: []
        });
      },

      publicPath: await api.applyPlugins({
        key: 'modifyPublicPathStr',
        type: api.ApplyPluginsType.modify,
        initialValue: api.config.publicPath || '',
        args: {}
      })
    },
    args: {}
  });
  const bundleConfig = await api.applyPlugins({
    type: api.ApplyPluginsType.modify,
    key: 'modifyBundleConfig',
    initialValue: await (0, _webpackConfig.default)({
      api,
      ...getConfigOpts
    }),
    args: {}
  });
  return {
    bundleConfig
  };
}

function cleanTmpPathExceptCache({
  absTmpPath
}) {
  if (!(0, _fs.existsSync)(absTmpPath)) return;
  (0, _fs.readdirSync)(absTmpPath).forEach(file => {
    if (file === '.cache') return;

    _utils.rimraf.sync((0, _path.join)(absTmpPath, file));
  });
} // These sizes are pretty large. We'll warn for bundles exceeding them.


const WARN_AFTER_BUNDLE_GZIP_SIZE = 1.8 * 1024 * 1024;
const WARN_AFTER_CHUNK_GZIP_SIZE = 1 * 1024 * 1024;

function printFileSizes(stats, dir) {
  var _json$children;

  const ui = require('cliui')({
    width: 80
  });

  const json = stats.toJson({
    hash: false,
    modules: false,
    chunks: false
  });

  const filesize = bytes => {
    bytes = Math.abs(bytes);
    const radix = 1024;
    const unit = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    let loop = 0; // calculate

    while (bytes >= radix) {
      bytes /= radix;
      ++loop;
    }

    return `${bytes.toFixed(1)} ${unit[loop]}`;
  };

  const assets = json.assets ? json.assets : json === null || json === void 0 ? void 0 : (_json$children = json.children) === null || _json$children === void 0 ? void 0 : _json$children.reduce((acc, child) => acc.concat(child === null || child === void 0 ? void 0 : child.assets), []);
  const seenNames = new Map();

  const isJS = val => /\.js$/.test(val);

  const isCSS = val => /\.css$/.test(val);

  const orderedAssets = assets.map(a => {
    a.name = a.name.split('?')[0]; // These sizes are pretty large

    const isMainBundle = a.name.indexOf('fes.') === 0;
    const maxRecommendedSize = isMainBundle ? WARN_AFTER_BUNDLE_GZIP_SIZE : WARN_AFTER_CHUNK_GZIP_SIZE;
    const isLarge = maxRecommendedSize && a.size > maxRecommendedSize;
    return { ...a,
      suggested: isLarge && isJS(a.name)
    };
  }).filter(a => {
    if (seenNames.has(a.name)) {
      return false;
    }

    seenNames.set(a.name, true);
    return isJS(a.name) || isCSS(a.name);
  }).sort((a, b) => {
    if (isJS(a.name) && isCSS(b.name)) return -1;
    if (isCSS(a.name) && isJS(b.name)) return 1;
    return b.size - a.size;
  });

  function getGzippedSize(asset) {
    const filepath = (0, _path.resolve)((0, _path.join)(dir, asset.name));

    if ((0, _fs.existsSync)(filepath)) {
      const buffer = (0, _fs.readFileSync)(filepath);
      return filesize(_zlib.default.gzipSync(buffer).length);
    }

    return filesize(0);
  }

  function makeRow(a, b, c) {
    return ` ${a}\t      ${b}\t ${c}`;
  }

  ui.div(`${makeRow(_utils.chalk.cyan.bold('File'), _utils.chalk.cyan.bold('Size'), _utils.chalk.cyan.bold('Gzipped'))}\n\n${// eslint-disable-next-line
  orderedAssets.map(asset => makeRow(/js$/.test(asset.name) ? asset.suggested ? _utils.chalk.yellow((0, _path.join)(dir, asset.name)) : _utils.chalk.green((0, _path.join)(dir, asset.name)) : _utils.chalk.blue((0, _path.join)(dir, asset.name)), filesize(asset.size), getGzippedSize(asset))).join('\n')}`);
  console.log(`${ui.toString()}\n\n  ${_utils.chalk.gray('Images and other types of assets omitted.')}\n`);

  if (orderedAssets !== null && orderedAssets !== void 0 && orderedAssets.some(asset => asset.suggested)) {
    // We'll warn for bundles exceeding them.
    // TODO: use umi docs
    console.log();
    console.log(_utils.chalk.yellow('The bundle size is significantly larger than recommended.'));
    console.log(_utils.chalk.yellow('Consider reducing it with code splitting'));
    console.log(_utils.chalk.yellow('You can also analyze the project dependencies using ANALYZE=1'));
    console.log();
  }
}
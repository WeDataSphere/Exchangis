"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startDevServer = startDevServer;

var _webpackDevServer = _interopRequireDefault(require("webpack-dev-server"));

var _webpack = _interopRequireDefault(require("webpack"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function startDevServer({
  webpackConfig,
  host,
  port,
  proxy,
  https,
  beforeMiddlewares,
  afterMiddlewares,
  customerDevServerConfig
}) {
  const options = {
    contentBase: webpackConfig.output.path,
    hot: true,
    host,
    sockHost: host,
    sockPort: port,
    proxy,
    compress: true,
    noInfo: true,
    disableHostCheck: true,
    clientLogLevel: 'silent',
    stats: 'errors-only',
    before: app => {
      beforeMiddlewares.forEach(middleware => {
        app.use(middleware);
      });
    },
    after: app => {
      afterMiddlewares.forEach(middleware => {
        app.use(middleware);
      });
    },
    headers: {
      'access-control-allow-origin': '*'
    },
    ...(customerDevServerConfig || {})
  };

  if (https) {
    options.https = true;
    options.key = _fs.default.readFileSync(_path.default.resolve(__dirname, './cert/key.pem'));
    options.cert = _fs.default.readFileSync(_path.default.resolve(__dirname, './cert/cert.pem'));
  }

  _webpackDevServer.default.addDevServerEntrypoints(webpackConfig, options);

  const compiler = (0, _webpack.default)(webpackConfig);
  const server = new _webpackDevServer.default(compiler, options);
  server.listen(port, host, err => {
    if (err) {
      console.error(err);
    }
  });
  return server;
}
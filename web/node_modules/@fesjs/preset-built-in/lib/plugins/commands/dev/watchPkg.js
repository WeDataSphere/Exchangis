"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.watchPkg = watchPkg;
exports.watchPkgs = watchPkgs;

var _path = require("path");

var _utils = require("@fesjs/utils");

var _fs = require("fs");

var _compiler = require("@fesjs/compiler");

/**
 * @copy 该文件代码大部分出自 umi，有需要请参考：
 * https://github.com/umijs/umi/blob/master/packages/preset-built-in/src/plugins/commands/dev/watchPkg.ts
 */
function getPlugins(opts) {
  return Object.keys({ ...opts.pkg.dependencies,
    ...opts.pkg.devDependencies
  }).filter(name => (0, _compiler.isPluginOrPreset)(_compiler.PluginType.plugin, name) || (0, _compiler.isPluginOrPreset)(_compiler.PluginType.preset, name));
}

function getPluginsFromPkgPath(opts) {
  let pkg = {};

  if ((0, _fs.existsSync)(opts.pkgPath)) {
    try {
      pkg = JSON.parse((0, _fs.readFileSync)(opts.pkgPath, 'utf-8'));
    } catch (e) {// ignore
    }
  }

  return getPlugins({
    pkg
  });
}

function watchPkg(opts) {
  const pkgPath = (0, _path.join)(opts.cwd, 'package.json');
  const plugins = getPluginsFromPkgPath({
    pkgPath
  });

  const watcher = _utils.chokidar.watch(pkgPath, {
    ignoreInitial: true
  });

  watcher.on('all', () => {
    const newPlugins = getPluginsFromPkgPath({
      pkgPath
    });

    if (!_utils.lodash.isEqual(plugins, newPlugins)) {
      // 已经重启了，只处理一次就够了
      opts.onChange();
    }
  });
  return () => {
    watcher.close();
  };
}

function watchPkgs(opts) {
  const unwatchs = [watchPkg({
    cwd: opts.cwd,
    onChange: opts.onChange
  })];

  if ((0, _utils.winPath)(opts.cwd) !== (0, _utils.winPath)(process.cwd())) {
    unwatchs.push(watchPkg({
      cwd: process.cwd(),
      onChange: opts.onChange
    }));
  }

  return () => {
    unwatchs.forEach(unwatch => {
      unwatch();
    });
  };
}
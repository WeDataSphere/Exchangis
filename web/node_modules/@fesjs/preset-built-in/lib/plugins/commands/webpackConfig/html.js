"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createHtmlWebpackConfig;

var _path = require("path");

var _fs = require("fs");

var _utils = require("@fesjs/utils");

var _resolveDefine = _interopRequireDefault(require("./resolveDefine"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function createHtmlWebpackConfig({
  api,
  cwd,
  config,
  webpackConfig,
  headScripts,
  isProd
}) {
  const htmlOptions = {
    title: 'fes.js',
    filename: '[name].html',
    ...config.html,
    templateParameters: (0, _resolveDefine.default)(config, true),
    mountElementId: config.mountElementId
  };

  if (isProd) {
    Object.assign(htmlOptions, {
      minify: {
        removeComments: true,
        collapseWhitespace: true,
        collapseBooleanAttributes: true,
        removeScriptTypeAttributes: true // more options:
        // https://github.com/kangax/html-minifier#options-quick-reference

      }
    });
  }

  const htmlPath = (0, _path.join)(cwd, 'public/index.html');
  const defaultHtmlPath = (0, _path.resolve)(__dirname, 'index-default.html');
  const publicCopyIgnore = []; // default, single page setup.

  htmlOptions.template = (0, _fs.existsSync)(htmlPath) ? htmlPath : defaultHtmlPath;
  publicCopyIgnore.push((0, _utils.winPath)(htmlOptions.template));
  webpackConfig.plugin('html').use(require.resolve('html-webpack-plugin'), [htmlOptions]); // 如果需要导出html，则根据路由生成对应的html文件

  if (config.exportStatic) {
    const routes = await api.getRoutes();

    const addHtml = _routes => {
      if (Array.isArray(_routes)) {
        _routes.forEach(route => {
          const _fileName = `${route.path.slice(1) || 'index'}.html`;

          if (_fileName !== 'index.html') {
            var _route$meta;

            const _htmlOptions = { ...config.html,
              title: (route === null || route === void 0 ? void 0 : (_route$meta = route.meta) === null || _route$meta === void 0 ? void 0 : _route$meta.title) || config.html.title || 'fes.js',
              filename: _fileName,
              templateParameters: (0, _resolveDefine.default)(config, true),
              mountElementId: config.mountElementId
            };
            webpackConfig.plugin(_fileName).use(require.resolve('html-webpack-plugin'), [_htmlOptions]);
          }

          if (route.children && route.children.length) {
            addHtml(route.children);
          }
        });
      }
    };

    addHtml(routes);
  }

  if (headScripts) {
    const headScriptsMap = await headScripts();
    webpackConfig.plugin('html-tags').use(require.resolve('html-webpack-tags-plugin'), [{
      append: false,
      scripts: headScriptsMap.map(script => ({
        path: script.src
      }))
    }]);
  }

  return {
    publicCopyIgnore
  };
}
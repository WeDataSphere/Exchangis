"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("@fesjs/utils");

var _readline = _interopRequireDefault(require("readline"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Logger {
  constructor(namespace) {
    _defineProperty(this, "LOG", _utils.chalk.black.bgBlue('LOG'));

    _defineProperty(this, "INFO", _utils.chalk.black.bgBlue('INFO'));

    _defineProperty(this, "WARN", _utils.chalk.black.bgHex('#faad14')('WARN'));

    _defineProperty(this, "ERROR", _utils.chalk.black.bgRed('ERROR'));

    _defineProperty(this, "PROFILE", _utils.chalk.black.bgCyan('PROFILE'));

    // TODO: get namespace filename accounding caller function
    if (!namespace) {
      throw new Error('logger needs namespace');
    }

    this.namespace = namespace;
    this.profilers = {};
    this.debug = (0, _utils.createDebug)(this.namespace);
  }

  log(...args) {
    // TODO: node env production
    console.log(this.LOG, ...args);
  }
  /**
   * The {@link logger.info} function is an alias for {@link logger.log()}.
   * @param args
   */


  info(...args) {
    console.log(this.INFO, ...args);
  }

  error(...args) {
    console.error(this.ERROR, ...args);
  }

  warn(...args) {
    console.warn(this.WARN, ...args);
  }

  formatTiming(timing) {
    return timing < 60 * 1000 ? `${Math.round(timing / 10) / 100}s` : `${Math.round(timing / 600) / 100}m`;
  }

  profile(id, message) {
    const time = Date.now();
    const namespace = `${this.namespace}:${id}`; // for test

    let msg;

    if (this.profilers[id]) {
      const timeEnd = this.profilers[id];
      delete this.profilers[id];
      process.stderr.write(`${this.PROFILE} `);
      msg = `${this.PROFILE} ${_utils.chalk.cyan(`└ ${namespace}`)} Completed in ${this.formatTiming(time - timeEnd)}`;
      console.log(msg);
    } else {
      msg = `${this.PROFILE} ${_utils.chalk.cyan(`┌ ${namespace}`)} ${message || ''}`;
      console.log(msg);
    }

    this.profilers[id] = time;
    return msg;
  }

  clearConsole(title) {
    if (process.stdout.isTTY) {
      const blank = '\n'.repeat(process.stdout.rows);
      console.log(blank);

      _readline.default.cursorTo(process.stdout, 0, 0);

      _readline.default.clearScreenDown(process.stdout);

      if (title) {
        console.log(title);
      }
    }
  }

}

exports.default = Logger;
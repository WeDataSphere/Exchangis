"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = require("fs");

var _path = require("path");

const namespace = 'plugin-model';

var _default = api => {
  const {
    paths,
    utils: {
      Mustache
    }
  } = api;

  const {
    lodash,
    winPath
  } = require('@fesjs/utils');

  const {
    getModels
  } = require('./utils/getModels');

  const {
    getTmpFile
  } = require('./utils/getTmpFile');

  function getModelDir() {
    return api.config.singular ? 'model' : 'models';
  }

  function getModelsPath() {
    return (0, _path.join)(paths.absSrcPath, getModelDir());
  }

  function getAllModels() {
    const srcModelsPath = getModelsPath();
    return lodash.uniq([...getModels(srcModelsPath)]);
  }

  const absCoreFilePath = (0, _path.join)(namespace, 'core.js');
  const absInitialStateFilePath = (0, _path.join)(namespace, 'models/initialState.js');
  api.register({
    key: 'addExtraModels',
    fn: () => [{
      absPath: winPath((0, _path.join)(paths.absTmpPath, absInitialStateFilePath)),
      namespace: '@@initialState'
    }]
  });
  api.onGenerateFiles(async () => {
    const files = getAllModels();
    const additionalModels = await api.applyPlugins({
      key: 'addExtraModels',
      type: api.ApplyPluginsType.add,
      initialValue: []
    });
    const tmpFiles = getTmpFile(files, additionalModels, paths.absSrcPath);
    api.writeTmpFile({
      path: absCoreFilePath,
      content: Mustache.render((0, _fs.readFileSync)((0, _path.join)(__dirname, 'runtime/core.tpl'), 'utf-8'), { ...tmpFiles
      })
    });
    api.copyTmpFiles({
      namespace,
      path: (0, _path.join)(__dirname, 'runtime'),
      ignore: ['.tpl']
    });
  });
  api.addPluginExports(() => [{
    specifiers: ['useModel'],
    source: absCoreFilePath
  }]);
};

exports.default = _default;
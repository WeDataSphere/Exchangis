"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIconsFromMenu = getIconsFromMenu;
exports.fillMenuByRoute = void 0;

var allIcons = _interopRequireWildcard(require("@ant-design/icons-vue"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const matchName = (config, name) => {
  let res = {};

  if (Array.isArray(config)) {
    for (let i = 0; i < config.length; i++) {
      const item = config[i];

      if (item.meta && item.meta.name === name) {
        res = item.meta;
        res.path = item.path;
        break;
      }

      if (item.children && item.children.length > 0) {
        res = matchName(item.children, name);
      }
    }
  }

  return res;
};

const fillMenuByRoute = (menuConfig, routeConfig, dep = 0) => {
  dep += 1;

  if (dep > 3) {
    throw new Error('[plugin-layout]: menu层级不能超出三层！');
  }

  const arr = [];

  if (Array.isArray(menuConfig) && Array.isArray(routeConfig)) {
    menuConfig.forEach(menu => {
      const pageConfig = {};

      if (menu.name) {
        Object.assign(pageConfig, matchName(routeConfig, menu.name));
      } // menu的配置优先级高，当menu存在配置时，忽略页面的配置


      Object.keys(pageConfig).forEach(prop => {
        if (menu[prop] === undefined || menu[prop] === null || menu[prop] === '') {
          menu[prop] = pageConfig[prop];
        }
      }); // 处理icon

      if (menu.icon) {
        const icon = menu.icon;
        const urlReg = /^((https?|ftp|file):\/\/)?([\da-z.-]+)\.([a-z.]{2,6})([/\w .-]*)*\/?$/;

        if (typeof icon === 'string' && !(urlReg.test(icon) || icon.includes('.svg'))) {
          if (!allIcons[icon]) {
            menu.icon = {
              type: 'icon',
              name: `${icon.replace(icon[0], icon[0].toUpperCase())}Outlined`
            };
          } else {
            menu.icon = {
              type: 'icon',
              name: icon
            };
          }
        }
      }

      if (menu.children && menu.children.length > 0) {
        menu.children = fillMenuByRoute(menu.children, routeConfig, dep);
      }

      arr.push(menu);
    });
  }

  return arr;
};

exports.fillMenuByRoute = fillMenuByRoute;

function getIconsFromMenu(data) {
  if (!Array.isArray(data)) {
    return [];
  }

  let icons = [];
  data.forEach((item = {
    path: '/'
  }) => {
    if (item.icon) {
      const {
        icon
      } = item;

      if (icon.type === 'icon') {
        icons.push(icon.name);
      }
    }

    if (item.children) {
      icons = icons.concat(getIconsFromMenu(item.children));
    }
  });
  return Array.from(new Set(icons));
}
/*!
 * @form-create/component-antdv-group v3.1.9
 * (c) 2018-2022 xaboy
 * Github https://github.com/xaboy/form-create with group
 * Released under the MIT License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vue'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.FcGroup = {}, global.Vue));
})(this, (function (exports, vue) { 'use strict';

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var is = {
    type: function type(arg, _type) {
      return Object.prototype.toString.call(arg) === '[object ' + _type + ']';
    },
    Undef: function Undef(v) {
      return v === undefined || v === null;
    },
    Element: function Element(arg) {
      return _typeof(arg) === 'object' && arg !== null && arg.nodeType === 1 && !is.Object(arg);
    },
    trueArray: function trueArray(data) {
      return Array.isArray(data) && data.length > 0;
    },
    Function: function Function(v) {
      var type = this.getType(v);
      return type === 'Function' || type === 'AsyncFunction';
    },
    getType: function getType(v) {
      var str = Object.prototype.toString.call(v);
      return /^\[object (.*)\]$/.exec(str)[1];
    },
    empty: function empty(value) {
      if (value === undefined || value === null) {
        return true;
      }

      if (Array.isArray(value) && Array.isArray(value) && !value.length) {
        return true;
      }

      return typeof value === 'string' && !value;
    }
  };
  ['Date', 'Object', 'String', 'Boolean', 'Array', 'Number'].forEach(function (t) {
    is[t] = function (arg) {
      return is.type(arg, t);
    };
  });
  function hasProperty(rule, k) {
    return {}.hasOwnProperty.call(rule, k);
  }

  var script$1 = {
    name: 'MinusCircleOutlined'
  };

  var _hoisted_1$1 = {
    "class": "anticon"
  };

  var _hoisted_2$1 = /*#__PURE__*/vue.createElementVNode("svg", {
    height: "1em",
    width: "1em",
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 1024 1024"
  }, [/*#__PURE__*/vue.createElementVNode("path", {
    d: "M696 480H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z",
    fill: "currentColor"
  }), /*#__PURE__*/vue.createElementVNode("path", {
    d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448s448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372s372 166.6 372 372s-166.6 372-372 372z",
    fill: "currentColor"
  })], -1);

  var _hoisted_3$1 = [_hoisted_2$1];
  function render$1(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("span", _hoisted_1$1, _hoisted_3$1);
  }

  script$1.render = render$1;

  var script = {
    name: 'PlusCircleOutlined'
  };

  var _hoisted_1 = {
    "class": "anticon"
  };

  var _hoisted_2 = /*#__PURE__*/vue.createElementVNode("svg", {
    height: "1em",
    width: "1em",
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 1024 1024"
  }, [/*#__PURE__*/vue.createElementVNode("path", {
    d: "M696 480H544V328c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v152H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h152v152c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V544h152c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z",
    fill: "currentColor"
  }), /*#__PURE__*/vue.createElementVNode("path", {
    d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448s448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372s372 166.6 372 372s-166.6 372-372 372z",
    fill: "currentColor"
  })], -1);

  var _hoisted_3 = [_hoisted_2];
  function render(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("span", _hoisted_1, _hoisted_3);
  }

  script.render = render;

  function $set(target, field, value) {
    target[field] = value;
  }

  function deepExtend(origin) {
    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var mode = arguments.length > 2 ? arguments[2] : undefined;
    var isArr = false;

    for (var key in target) {
      if (Object.prototype.hasOwnProperty.call(target, key)) {
        var clone = target[key];

        if ((isArr = Array.isArray(clone)) || is.Object(clone)) {
          var nst = origin[key] === undefined;

          if (isArr) {
            isArr = false;
            nst && $set(origin, key, []);
          } else if (clone._clone && mode !== undefined) {
            if (mode) {
              clone = clone.getRule();
              nst && $set(origin, key, {});
            } else {
              $set(origin, key, clone._clone());
              continue;
            }
          } else {
            nst && $set(origin, key, {});
          }

          origin[key] = deepExtend(origin[key], clone, mode);
        } else {
          $set(origin, key, clone);

          if (!is.Undef(clone)) {
            if (!is.Undef(clone.__json)) {
              origin[key].__json = clone.__json;
            }

            if (!is.Undef(clone.__origin)) {
              origin[key].__origin = clone.__origin;
            }
          }
        }
      }
    }

    return mode !== undefined && Array.isArray(origin) ? origin.filter(function (v) {
      return !v || !v.__ctrl;
    }) : origin;
  }
  function deepCopy(value) {
    return deepExtend({}, {
      value: value
    }).value;
  }

  var _extends = Object.assign || function (a) {
    for (var b, c = 1; c < arguments.length; c++) {
      for (var d in b = arguments[c], b) {
        Object.prototype.hasOwnProperty.call(b, d) && $set(a, d, b[d]);
      }
    }

    return a;
  };

  function extend() {
    return _extends.apply(this, arguments);
  }

  function _isSlot(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var NAME = 'fcGroup';
  var Group = vue.defineComponent({
    name: NAME,
    props: {
      field: String,
      rule: Array,
      expand: Number,
      options: Object,
      button: {
        type: Boolean,
        "default": true
      },
      max: {
        type: Number,
        "default": 0
      },
      min: {
        type: Number,
        "default": 0
      },
      modelValue: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      defaultValue: Object,
      disabled: {
        type: Boolean,
        "default": false
      },
      syncDisabled: {
        type: Boolean,
        "default": true
      },
      fontSize: {
        type: Number,
        "default": 28
      },
      onBeforeRemove: {
        type: Function,
        "default": function _default() {}
      },
      onBeforeAdd: {
        type: Function,
        "default": function _default() {}
      },
      formCreateInject: Object
    },
    data: function data() {
      return {
        len: 0,
        cacheRule: {},
        cacheValue: {},
        form: vue.markRaw(this.formCreateInject.form.$form())
      };
    },
    emits: ['update:modelValue', 'change', 'itemMounted', 'remove'],
    watch: {
      rule: {
        handler: function handler(n, o) {
          var _this = this;

          Object.keys(this.cacheRule).forEach(function (v) {
            var item = _this.cacheRule[v];

            if (item.$f) {
              var val = item.$f.formData();

              if (n === o) {
                item.$f.deferSyncValue(function () {
                  deepExtend(item.rule, n);
                  item.$f.setValue(val);
                }, true);
              } else {
                var _val = item.$f.formData();

                item.$f.once('reloading', function () {
                  item.$f.setValue(_val);
                });
                item.rule = deepCopy(n);
              }
            }
          });
        },
        deep: true
      },
      disabled: function disabled(n) {
        if (this.syncDisabled) {
          var lst = this.cacheRule;
          Object.keys(lst).forEach(function (k) {
            lst[k].$f.disabled(n);
          });
        }
      },
      expand: function expand(n) {
        var d = n - this.modelValue.length;

        if (d > 0) {
          this.expandRule(d);
        }
      },
      modelValue: {
        handler: function handler(n) {
          var _this2 = this;

          n = n || [];
          var keys = Object.keys(this.cacheRule),
              total = keys.length,
              len = total - n.length;

          if (len < 0) {
            for (var i = len; i < 0; i++) {
              this.addRule(n.length + i);
            }

            for (var _i = 0; _i < total; _i++) {
              this.setValue(keys[_i], n[_i]);
            }
          } else {
            if (len > 0) {
              for (var _i2 = 0; _i2 < len; _i2++) {
                this.removeRule(keys[total - _i2 - 1]);
              }
            }

            n.forEach(function (val, i) {
              _this2.setValue(keys[i], n[i]);
            });
          }
        },
        deep: true
      }
    },
    methods: {
      _value: function _value(v) {
        return v && hasProperty(v, this.field) ? v[this.field] : v;
      },
      cache: function cache(k, val) {
        this.cacheValue[k] = JSON.stringify(val);
      },
      input: function input(value) {
        this.$emit('update:modelValue', value);
        this.$emit('change', value);
      },
      formData: function formData(key, _formData) {
        var _this3 = this;

        var cacheRule = this.cacheRule;
        var keys = Object.keys(cacheRule);

        if (keys.filter(function (k) {
          return cacheRule[k].$f;
        }).length !== keys.length) {
          return;
        }

        var value = keys.map(function (k) {
          var data = key === k ? _formData : _objectSpread2({}, _this3.cacheRule[k].$f.form);
          var value = _this3.field ? data[_this3.field] || null : data;

          _this3.cache(k, value);

          return value;
        });
        this.input(value);
      },
      setValue: function setValue(key, value) {
        var field = this.field;

        if (field) {
          value = _defineProperty({}, field, this._value(value));
        }

        if (this.cacheValue[key] === JSON.stringify(field ? value[field] : value)) {
          return;
        }

        this.cache(key, value);
      },
      addRule: function addRule(i, emit) {
        var _this4 = this;

        var rule = this.formCreateInject.form.copyRules(this.rule || []);
        var options = this.options ? _objectSpread2({}, this.options) : {
          submitBtn: false,
          resetBtn: false
        };

        if (this.defaultValue) {
          if (!options.formData) options.formData = {};
          var defVal = deepCopy(this.defaultValue);
          extend(options.formData, this.field ? _defineProperty({}, this.field, defVal) : defVal);
        }

        this.cacheRule[++this.len] = {
          rule: rule,
          options: options
        };

        if (emit) {
          vue.nextTick(function () {
            return _this4.$emit('add', rule, Object.keys(_this4.cacheRule).length - 1);
          });
        }
      },
      add$f: function add$f(i, key, $f) {
        var _this5 = this;

        this.cacheRule[key].$f = $f;
        this.formData(key, $f.formData());
        vue.nextTick(function () {
          if (_this5.syncDisabled) {
            $f.disabled(_this5.disabled);
          }

          _this5.$emit('itemMounted', $f, Object.keys(_this5.cacheRule).indexOf(key));
        });
      },
      removeRule: function removeRule(key, emit) {
        var _this6 = this;

        var index = Object.keys(this.cacheRule).indexOf(key);
        delete this.cacheRule[key];
        delete this.cacheValue[key];

        if (emit) {
          vue.nextTick(function () {
            return _this6.$emit('remove', index);
          });
        }
      },
      add: function add() {
        if (this.disabled || false === this.onBeforeAdd(this.modelValue)) {
          return;
        }

        this.modelValue.push(this.field ? null : {});
        this.$emit('update:modelValue', this.modelValue);
      },
      del: function del(index, key) {
        if (this.disabled || false === this.onBeforeRemove(this.modelValue, index)) {
          return;
        }

        this.removeRule(key, true);
        this.modelValue.splice(index, 1);
        this.input(this.modelValue);
      },
      addIcon: function addIcon(key) {
        return vue.createVNode(script, {
          "key": "a".concat(key),
          "style": "font-size:".concat(this.fontSize, "px;cursor:").concat(this.disabled ? 'not-allowed;color:#c9cdd4' : 'pointer', ";"),
          "onClick": this.add
        }, null);
      },
      delIcon: function delIcon(index, key) {
        var _this7 = this;

        return vue.createVNode(script$1, {
          "key": "d".concat(key),
          "style": "font-size:".concat(this.fontSize, "px;cursor:").concat(this.disabled ? 'not-allowed;color:#c9cdd4' : 'pointer;color:#606266', ";"),
          "onClick": function onClick() {
            return _this7.del(index, key);
          }
        }, null);
      },
      makeIcon: function makeIcon(total, index, key) {
        var _this8 = this;

        if (this.$slots.button) {
          return this.$slots.button({
            total: total,
            index: index,
            vm: this,
            key: key,
            del: function del() {
              return _this8.del(index, key);
            },
            add: this.add
          });
        }

        if (index === 0) {
          return [this.max !== 0 && total >= this.max ? null : this.addIcon(key), this.min === 0 || total > this.min ? this.delIcon(index, key) : null];
        }

        if (index >= this.min) {
          return this.delIcon(index, key);
        }
      },
      emitEvent: function emitEvent(name, args, index, key) {
        this.$emit.apply(this, [name].concat(_toConsumableArray(args), [this.cacheRule[key].$f, index]));
      },
      expandRule: function expandRule(n) {
        for (var i = 0; i < n; i++) {
          this.modelValue.push(this.field ? null : {});
        }
      }
    },
    created: function created() {
      var d = (this.expand || 0) - this.modelValue.length;

      for (var i = 0; i < this.modelValue.length; i++) {
        this.addRule(i);
      }

      if (d > 0) {
        this.expandRule(d);
      }
    },
    render: function render() {
      var _this9 = this;

      var keys = Object.keys(this.cacheRule);
      var button = this.button;
      var Type = this.form;
      return keys.length === 0 ? this.$slots["default"] ? this.$slots["default"]({
        vm: this,
        add: this.add
      }) : vue.createVNode(script, {
        "key": 1,
        "style": "font-size:".concat(this.fontSize, "px;vertical-align:middle;color:").concat(this.disabled ? '#c9cdd4;cursor: not-allowed' : '#606266;cursor:pointer', ";"),
        "onClick": this.add
      }, null) : vue.createVNode("div", {
        "key": 2
      }, [keys.map(function (key, index) {
        var _slot;

        var _this9$cacheRule$key = _this9.cacheRule[key],
            rule = _this9$cacheRule$key.rule,
            options = _this9$cacheRule$key.options;
        return vue.createVNode(vue.resolveComponent("aRow"), {
          "align": "middle",
          "type": "flex",
          "key": key,
          "style": "border-bottom:1px dashed #DCDFE6;margin-bottom:10px;"
        }, {
          "default": function _default() {
            return [vue.createVNode(vue.resolveComponent("aCol"), {
              "span": button ? 20 : 24
            }, {
              "default": function _default() {
                return [vue.createVNode(Type, {
                  "key": key,
                  "inFor": true,
                  "onUpdate:modelValue": function onUpdateModelValue(formData) {
                    return _this9.formData(key, formData);
                  },
                  "modelValue": _this9.field ? _defineProperty({}, _this9.field, _this9._value(_this9.modelValue[index])) : _this9.modelValue[index],
                  "onEmit-event": function onEmitEvent(name) {
                    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                      args[_key - 1] = arguments[_key];
                    }

                    return _this9.emitEvent(name, args, index, key);
                  },
                  "onUpdate:api": function onUpdateApi($f) {
                    return _this9.add$f(index, key, $f);
                  },
                  "rule": rule,
                  "option": options,
                  "extendOption": true
                }, null)];
              }
            }), button ? vue.createVNode(vue.resolveComponent("aCol"), {
              "span": 2,
              "pull": 1,
              "push": 1
            }, _isSlot(_slot = _this9.makeIcon(keys.length, index, key)) ? _slot : {
              "default": function _default() {
                return [_slot];
              }
            }) : null];
          }
        });
      })]);
    }
  });

  exports["default"] = Group;

  Object.defineProperty(exports, '__esModule', { value: true });

}));

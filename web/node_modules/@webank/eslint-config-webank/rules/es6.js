module.exports = {
    env: {
        es6: true
    },
    parserOptions: {
        ecmaVersion: 6,
        sourceType: 'module',
        ecmaFeatures: {
            generators: false,
            objectLiteralDuplicateProperties: false
        }
    },

    rules: {
    // enforces no braces where they can be omitted
    // https://eslint.org/docs/rules/arrow-body-style
    // TODO: enable requireReturnForObjectLiteral?
        // @fixable 箭头函数能够省略 return 的时候，必须省略，比如必须写成 () => 0，禁止写成 () => { return 0 }
        'arrow-body-style': ['error', 'as-needed', {
            requireReturnForObjectLiteral: false
        }],

        // require parens in arrow function arguments
        // https://eslint.org/docs/rules/arrow-parens
        // @fixable 箭头函数只有一个参数的时候，必须加括号
        'arrow-parens': ['error', 'as-needed', {
            requireForBlockBody: true
        }],

        // require space before/after arrow function's arrow
        // https://eslint.org/docs/rules/arrow-spacing
        // @fixable 箭头函数的箭头前后必须有空格
        'arrow-spacing': ['error', { before: true, after: true }],

        // verify super() callings in constructors
        // 派生 class constructor 中必须有 super
        'constructor-super': 'error',

        // enforce the spacing around the * in generator functions
        // https://eslint.org/docs/rules/generator-star-spacing
        // @fixable generator 的 * 前面禁止有空格，后面必须有空格
        'generator-star-spacing': ['error', { before: false, after: true }],

        // disallow modifying variables of class declarations
        // https://eslint.org/docs/rules/no-class-assign
        // 禁止对定义过的 class 重新赋值
        'no-class-assign': 'error',

        // disallow arrow functions where they could be confused with comparisons
        // https://eslint.org/docs/rules/no-confusing-arrow
        // @fixable 禁止出现难以理解的箭头函数，比如 let x = a => 1 ? 2 : 3
        'no-confusing-arrow': ['error', {
            allowParens: true
        }],

        // disallow modifying variables that are declared using const
        // 禁止对使用 const 定义的常量重新赋值
        'no-const-assign': 'error',

        // disallow duplicate class members
        // https://eslint.org/docs/rules/no-dupe-class-members
        // 禁止重复定义类
        'no-dupe-class-members': 'error',

        // disallow importing from the same path more than once
        // https://eslint.org/docs/rules/no-duplicate-imports
        // replaced by https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-duplicates.md
        // 禁止重复 import 模块
        'no-duplicate-imports': 'off',

        // disallow symbol constructor
        // https://eslint.org/docs/rules/no-new-symbol
        // 禁止使用 new 来生成 Symbol
        'no-new-symbol': 'error',

        // disallow specific imports
        // https://eslint.org/docs/rules/no-restricted-imports
        // 禁止 import 指定的模块
        // @off 它用于限制某个具体的模块不能使用
        'no-restricted-imports': ['off', {
            paths: [],
            patterns: []
        }],

        // disallow to use this/super before super() calling in constructors.
        // https://eslint.org/docs/rules/no-this-before-super
        // 禁止在 super 被调用之前使用 this 或 super
        'no-this-before-super': 'error',

        // disallow useless computed property keys
        // https://eslint.org/docs/rules/no-useless-computed-key
        // @fixable 禁止出现没必要的计算键名，比如 let a = { ['0']: 0 };
        'no-useless-computed-key': 'error',

        // disallow unnecessary constructor
        // https://eslint.org/docs/rules/no-useless-constructor
        // 禁止出现没必要的 constructor，比如 constructor(value) { super(value) }
        'no-useless-constructor': 'error',

        // disallow renaming import, export, and destructured assignments to the same name
        // https://eslint.org/docs/rules/no-useless-rename
        // @fixable 禁止解构时出现同样名字的的重命名，比如 let { foo: foo } = bar;
        'no-useless-rename': ['error', {
            ignoreDestructuring: false,
            ignoreImport: false,
            ignoreExport: false
        }],

        // require let or const instead of var
        // 不允许使用 var
        'no-var': 'error',

        // require method and property shorthand syntax for object literals
        // https://eslint.org/docs/rules/object-shorthand
        // 对象简介表达
        // methods
        // var foo = {
        //     a() {},
        //     b() {}
        // };
        'object-shorthand': ['error', 'always', {
            ignoreConstructors: false,
            avoidQuotes: true
        }],

        // suggest using arrow functions as callbacks
        // @fixable 使用箭头函数作为回调
        'prefer-arrow-callback': ['error', {
            allowNamedFunctions: false,
            allowUnboundThis: true
        }],

        // suggest using of const declaration for variables that are never modified after declared
        // 不改变的变量使用 const
        'prefer-const': ['error', {
            destructuring: 'any',
            ignoreReadBeforeAssign: true
        }],

        // Prefer destructuring from arrays and objects
        // https://eslint.org/docs/rules/prefer-destructuring
        // 某些情况使用解构
        'prefer-destructuring': ['error', {
            VariableDeclarator: {
                array: false,
                object: true
            },
            AssignmentExpression: {
                array: true,
                object: true
            }
        }, {
            enforceForRenamedProperties: false
        }],

        // disallow parseInt() in favor of binary, octal, and hexadecimal literals
        // https://eslint.org/docs/rules/prefer-numeric-literals
        // @fixable 必须使用 0b11111011 而不是 parseInt('111110111', 2)
        'prefer-numeric-literals': 'error',

        // use rest parameters instead of arguments
        // https://eslint.org/docs/rules/prefer-rest-params
        // 使用 ...args 而不是 arguments
        'prefer-rest-params': 'error',

        // suggest using the spread operator instead of .apply()
        // https://eslint.org/docs/rules/prefer-spread
        // @fixable 必须使用 ... 而不是 apply，比如 foo(...args)
        'prefer-spread': 'error',

        // suggest using template literals instead of string concatenation
        // https://eslint.org/docs/rules/prefer-template
        // @fixable 必须使用模版字符串而不是字符串连接
        'prefer-template': 'error',

        // disallow generator functions that do not have yield
        // https://eslint.org/docs/rules/require-yield
        // generator 函数内必须有 yield
        'require-yield': 'error',

        // enforce spacing between object rest-spread
        // https://eslint.org/docs/rules/rest-spread-spacing
        // ... 的后面禁止有空格
        'rest-spread-spacing': ['error', 'never'],

        // import sorting
        // https://eslint.org/docs/rules/sort-imports
        'sort-imports': ['off', {
            ignoreCase: false,
            ignoreDeclarationSort: false,
            ignoreMemberSort: false,
            memberSyntaxSortOrder: ['none', 'all', 'multiple', 'single']
        }],

        // require a Symbol description
        // https://eslint.org/docs/rules/symbol-description
        // 创建 Symbol 时必须传入参数
        'symbol-description': 'error',

        // enforce usage of spacing in template strings
        // https://eslint.org/docs/rules/template-curly-spacing
        // @fixable ${name} 内的首尾禁止有空格
        'template-curly-spacing': 'error',

        // enforce spacing around the * in yield* expressions
        // https://eslint.org/docs/rules/yield-star-spacing
        // @fixable yield* 后面必须要有空格
        'yield-star-spacing': ['error', 'after']
    }
};

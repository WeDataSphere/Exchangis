module.exports = {
    rules: {
        // enforces getter/setter pairs in objects
        // setter 必须有对应 getter, getter 可以没有对应的 setter
        'accessor-pairs': [
            'error',
            {
                setWithoutGet: true,
                getWithoutSet: false
            }
        ],

        // enforces return statements in callbacks of array's methods
        // https://eslint.org/docs/rules/array-callback-return
        // 数组的方法除了 forEach 之外，回调函数必须有返回值，可以返回 undefined
        'array-callback-return': ['error', { allowImplicit: true }],

        // treat var statements as if they were block scoped
        // 将 var 定义的变量视为块作用域，禁止在块外使用
        'block-scoped-var': 'error',

        // specify the maximum cyclomatic complexity allowed in a program
        // 禁止函数的循环复杂度超过 20
        complexity: [
            'error',
            {
                max: 20
            }
        ],

        // enforce that class methods use "this"
        // https://eslint.org/docs/rules/class-methods-use-this
        // 在类的非静态方法中，必须存在对 this 的引用
        'class-methods-use-this': 'off',

        // require return statements to either always or never specify values
        // 禁止函数在不同分支返回不同类型的值
        'consistent-return': 'off',

        // specify curly brace conventions for all control statements
        // if 多行后面必须要有 {
        curly: ['error', 'multi-line'],

        // require default case in switch statements
        // switch 语句必须要有 default
        'default-case': ['error', { commentPattern: '^no default$' }],

        // encourages use of dot notation whenever possible
        // @fixable 禁止出现 foo['bar']，必须写成 foo.bar
        'dot-notation': ['error', { allowKeywords: true }],

        // enforces consistent newlines before or after dots
        // https://eslint.org/docs/rules/dot-location
        // @fixable 链式调用的时候，点号必须放在第二行的开头，禁止放在第一行结尾
        'dot-location': ['error', 'property'],

        // require the use of === and !==
        // https://eslint.org/docs/rules/eqeqeq
        // @fixable 必须使用 === 或者 !==，禁止使用 == 或 !=，与 null 比较除外
        eqeqeq: ['error', 'always', { null: 'ignore' }],

        // make sure for-in loops have an if statement
        // 使用 for in 需要有 hasOwnProperty
        'guard-for-in': 'error',

        // enforce a maximum number of classes per file
        // https://eslint.org/docs/rules/max-classes-per-file
        // TODO: semver-major (eslint 5): enable
        // 一个文件中最多可以存在的 class 数量
        'max-classes-per-file': ['off', 1],

        // disallow the use of alert, confirm, and prompt
        // 是否禁止使用 alert
        'no-alert': 'warn',

        // disallow use of arguments.caller or arguments.callee
        // 禁止使用 caller 或 callee
        'no-caller': 'error',

        // disallow lexical declarations in case/default clauses
        // https://eslint.org/docs/rules/no-case-declarations.html
        // switch 的 case 内有变量定义的时候
        // 必须使用大括号将 case 内变成一个代码块
        'no-case-declarations': 'error',

        // disallow division operators explicitly at beginning of regular expression
        // https://eslint.org/docs/rules/no-div-regex
        // 禁止在正则表达式中出现形似除法操作符的开头，如 let a = /=foo/
        // @off 有语法高亮时不会产生歧义
        'no-div-regex': 'off',

        // disallow else after a return in an if
        // https://eslint.org/docs/rules/no-else-return
        // @fixable 禁止在 else 内使用 return, 必须改为提前结束
        // @off else 中使用 return 可以使代码结构更清晰
        'no-else-return': ['error', { allowElseIf: false }],

        // disallow empty functions, except for standalone funcs/arrows
        // https://eslint.org/docs/rules/no-empty-function
        // 禁止有空函数
        'no-empty-function': ['error', {
            allow: [
                'arrowFunctions',
                'functions',
                'methods'
            ]
        }],

        // disallow empty destructuring patterns
        // https://eslint.org/docs/rules/no-empty-pattern
        // 禁止解构中出现 {} 或 []
        'no-empty-pattern': 'error',

        // disallow comparisons to null without a type-checking operator
        // 禁止使用 foo == null 或 foo !== null
        // @off foo == null 用于判断 foo 不是 null 且不是 undefined 比较有用
        'no-eq-null': 'off',

        // disallow use of eval()
        // 禁止使用 eval
        'no-eval': 'error',

        // disallow adding to native types
        // 禁止修改原生对象
        'no-extend-native': 'error',

        // disallow unnecessary function binding
        // @fixable 禁止出现没有必要的 bind
        'no-extra-bind': 'error',

        // disallow Unnecessary Labels
        // https://eslint.org/docs/rules/no-extra-label
        // @fixable 禁止出现没有必要的 label
        'no-extra-label': 'error',

        // disallow fallthrough of case statements
        // switch 的 case 内必须有 break, return 或 throw
        'no-fallthrough': 'error',

        // disallow the use of leading or trailing decimal points in numeric literals
        // @fixable 表示小数时，禁止省略 0，如 .1
        'no-floating-decimal': 'error',

        // disallow reassignments of native objects or read-only globals
        // https://eslint.org/docs/rules/no-global-assign
        // 禁止对全局变量赋值
        'no-global-assign': ['error', { exceptions: [] }],

        // disallow implicit type conversions
        // https://eslint.org/docs/rules/no-implicit-coercion
        // 是否禁止奇奇怪怪的类型转换
        'no-implicit-coercion': ['off', {
            boolean: false,
            number: true,
            string: true,
            allow: []
        }],

        // disallow var and named functions in global scope
        // https://eslint.org/docs/rules/no-implicit-globals
        // 不允许在顶级脚本作用域中声明var并命名 function
        'no-implicit-globals': 'off',

        // disallow use of eval()-like methods
        // 不允许使用 eval
        'no-implied-eval': 'error',

        // disallow this keywords outside of classes or class-like objects
        // 禁止类之前使用this
        'no-invalid-this': 'off',

        // disallow usage of __iterator__ property
        // 禁止使用 __iterator__
        'no-iterator': 'error',

        // disallow use of labels for anything other then loops and switches
        // 禁止使用 label
        'no-labels': ['error', { allowLoop: false, allowSwitch: false }],

        // disallow unnecessary nested blocks
        // 禁止使用没有必要的 {} 作为代码块
        'no-lone-blocks': 'error',

        // disallow creation of functions within loops
        // 禁止在循环内的函数中出现循环体条件语句中定义的变量
        'no-loop-func': 'error',

        // disallow magic numbers
        // https://eslint.org/docs/rules/no-magic-numbers
        // 禁止使用 magic numbers
        // @off 太严格了
        'no-magic-numbers': ['off', {
            ignore: [],
            ignoreArrayIndexes: true,
            enforceConst: true,
            detectObjects: false
        }],

        // disallow use of multiple spaces
        // @fixable 禁止出现连续的多个空格
        // 除非是注释前，或对齐对象的属性、变量定义、import 等
        'no-multi-spaces': ['error', {
            ignoreEOLComments: false
        }],

        // disallow use of multiline strings
        // 禁止使用 \ 来换行字符串
        'no-multi-str': 'error',

        // disallow use of new operator when not part of the assignment or comparison
        // 禁止直接 new 一个类而不赋值
        'no-new': 'error',

        // disallow use of new operator for Function object
        // 禁止使用 new Function
        'no-new-func': 'error',

        // disallows creating new instances of String, Number, and Boolean
        // 禁止使用 new 生成 String, Number 或 Boolean
        'no-new-wrappers': 'error',

        // disallow use of (old style) octal literals
        // 禁止使用 0 开头的数字表示八进制
        'no-octal': 'error',

        // disallow use of octal escape sequences in string literals, such as
        // var foo = 'Copyright \251';
        // 禁止使用八进制的转义符
        'no-octal-escape': 'error',

        // disallow reassignment of function parameters
        // disallow parameter object manipulation except for specific exclusions
        // rule: https://eslint.org/docs/rules/no-param-reassign.html
        // 禁止对函数参数重新赋值
        'no-param-reassign': ['off', {
            props: true,
            ignorePropertyModificationsFor: [
                'acc', // for reduce accumulators
                'accumulator', // for reduce accumulators
                'e', // for e.returnvalue
                'ctx', // for Koa routing
                'req', // for Express requests
                'request', // for Express requests
                'res', // for Express responses
                'response', // for Express responses
                '$scope', // for Angular 1 scopes
                'staticContext' // for ReactRouter context
            ]
        }],

        // disallow usage of __proto__ property
        // 禁止使用 __proto__
        'no-proto': 'error',

        // disallow declaring the same variable more then once
        // 禁止重复定义变量
        'no-redeclare': 'error',

        // disallow certain object properties
        // https://eslint.org/docs/rules/no-restricted-properties
        // 禁止使用指定的对象属性
        // @off 它用于显示某个具体的 api 不能使用
        'no-restricted-properties': ['error', {
            object: 'arguments',
            property: 'callee',
            message: 'arguments.callee is deprecated'
        }, {
            object: 'global',
            property: 'isFinite',
            message: 'Please use Number.isFinite instead'
        }, {
            object: 'self',
            property: 'isFinite',
            message: 'Please use Number.isFinite instead'
        }, {
            object: 'window',
            property: 'isFinite',
            message: 'Please use Number.isFinite instead'
        }, {
            object: 'global',
            property: 'isNaN',
            message: 'Please use Number.isNaN instead'
        }, {
            object: 'self',
            property: 'isNaN',
            message: 'Please use Number.isNaN instead'
        }, {
            object: 'window',
            property: 'isNaN',
            message: 'Please use Number.isNaN instead'
        }, {
            property: '__defineGetter__',
            message: 'Please use Object.defineProperty instead.'
        }, {
            property: '__defineSetter__',
            message: 'Please use Object.defineProperty instead.'
        }, {
            object: 'Math',
            property: 'pow',
            message: 'Use the exponentiation operator (**) instead.'
        }],

        // disallow use of assignment in return statement
        // 禁止在 return 语句里赋值
        'no-return-assign': ['error', 'always'],

        // disallow redundant `return await`
        // 禁止在 return 语句里使用 await
        'no-return-await': 'error',

        // disallow use of `javascript:` urls.
        // 禁止出现 location.href="javascritp:void(0)";
        'no-script-url': 'error',

        // disallow self assignment
        // https://eslint.org/docs/rules/no-self-assign
        // 禁止将自己赋值给自己
        'no-self-assign': 'error',

        // disallow comparisons where both sides are exactly the same
        // 禁止将自己与自己比较'
        'no-self-compare': 'error',

        // disallow use of comma operator
        // 禁止使用逗号作操作符
        'no-sequences': 'error',

        // restrict what can be thrown as an exception
        // 禁止 throw 字面量，必须 throw 一个 error 对象
        'no-throw-literal': 'error',

        // disallow unmodified conditions of loops
        // https://eslint.org/docs/rules/no-unmodified-loop-condition
        // 循环内必须对循环条件的变量有修改
        'no-unmodified-loop-condition': 'off',

        // disallow usage of expressions in statement position
        // 禁止无用表达式
        // a && b()
        // a ? b : c()
        // tag`some tagged template string`;
        'no-unused-expressions': ['error', {
            allowShortCircuit: true,
            allowTernary: true,
            allowTaggedTemplates: true
        }],

        // disallow unused labels
        // https://eslint.org/docs/rules/no-unused-labels
        // @fixable 禁止出现没用的 label
        'no-unused-labels': 'error',

        // disallow unnecessary .call() and .apply()
        // 禁止出现没必要的 call 或 apply
        'no-useless-call': 'error',

        // Disallow unnecessary catch clauses
        // https://eslint.org/docs/rules/no-useless-catch
        // TODO: enable, semver-major
        // 禁止出现没必要的 catch
        'no-useless-catch': 'off',

        // disallow useless string concatenation
        // https://eslint.org/docs/rules/no-useless-concat
        // 禁止出现没有必要的字符串连接
        'no-useless-concat': 'error',

        // disallow unnecessary string escaping
        // https://eslint.org/docs/rules/no-useless-escape
        // 禁止使用不必要的转译字符
        'no-useless-escape': 'error',

        // disallow redundant return; keywords
        // https://eslint.org/docs/rules/no-useless-return
        // @fixable 禁止没必要的 return
        // @off 没必要限制 return
        'no-useless-return': 'error',

        // disallow use of void operator
        // https://eslint.org/docs/rules/no-void
        // 禁止使用 void
        'no-void': 'error',

        // disallow usage of configurable warning terms in comments: e.g. todo
        // 禁止有未完成或需要审核的代码添加注释
        'no-warning-comments': ['off', { terms: ['todo', 'fixme', 'xxx'], location: 'start' }],

        // disallow use of the with statement
        // 禁止使用 with
        'no-with': 'error',

        // require using Error objects as Promise rejection reasons
        // https://eslint.org/docs/rules/prefer-promise-reject-errors
        // Promise 的 reject 中必须传入 Error 对象，而不是字面量
        // 'prefer-promise-reject-errors': ['error', { allowEmptyReject: true }],
        'prefer-promise-reject-errors': 'off',

        // Suggest using named capture group in regular expression
        // https://eslint.org/docs/rules/prefer-named-capture-group
        'prefer-named-capture-group': 'off',

        // require use of the second argument for parseInt()
        // parseInt 必须传入第二个参数
        radix: 'off',

        // require `await` in `async function` (note: this is a horrible rule that should never be used)
        // https://eslint.org/docs/rules/require-await
        // async 函数中必须存在 await 语句
        // @off async function 中没有 await 的写法很常见
        'require-await': 'off',

        // Enforce the use of u flag on RegExp
        // https://eslint.org/docs/rules/require-unicode-regexp
        'require-unicode-regexp': 'off',

        // requires to declare all vars on top of their containing scope
        // var 必须在作用域的最前面
        'vars-on-top': 'error',

        // require immediate function invocation to be wrapped in parentheses
        // https://eslint.org/docs/rules/wrap-iife.html
        // @fixable 立即执行函数，必须符合如下格式：
        //  (function () { return { y: 1 };}())
        'wrap-iife': ['error', 'outside', { functionPrototypeMethods: false }],

        // require or disallow Yoda conditions
        // @fixable 必须使用 if (foo === 5) 而不是 if (5 === foo)
        yoda: 'error'
    }
};
